{"version":3,"sources":["components/Cell.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","data-id","id","onClick","click","player","App","state","moves","Array","fill","gameOver","checkWin","winner","some","option","a","b","c","match","checkDraw","every","el","handleClick","event","target","dataset","makeMove","slice","vacantIDs","forEach","push","Math","floor","random","length","setState","componentDidUpdate","draw","setTimeout","alert","resetGame","renderCell","key","bind","renderCells","map","_","i","this","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAUeA,EARF,SAAAC,GACX,OACE,yBAAKC,UAAU,OAAOC,UAASF,EAAMG,GAAIC,QAASJ,EAAMK,OACrDL,EAAMM,SC0FEC,G,iNA1FbC,MAAQ,CACNC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,UAAU,G,EAGZC,SAAW,SAAAJ,GACT,IAAIK,EAiBJ,MAhBuB,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEkBC,KAAK,SAAAC,GAAW,IAAD,cACtBA,EADsB,GACjCC,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAElCC,EAAQX,EAAMQ,IAAMR,EAAMQ,KAAOR,EAAMS,IAAMT,EAAMQ,KAAOR,EAAMU,GAEtE,OADIC,IAAON,EAASL,EAAMQ,IACnBG,KAEKN,G,EAGhBO,UAAY,SAAAZ,GAAK,OAAIA,EAAMa,MAAM,SAAAC,GAAE,OAAW,OAAPA,K,EACvCX,SAAW,SAAAH,GAAK,OAAI,EAAKI,SAASJ,IAAU,EAAKY,UAAUZ,I,EAE3De,YAAc,SAAAC,GAAU,IACdtB,EAAOsB,EAAMC,OAAOC,QAApBxB,GACF,EAAKK,MAAMI,UAAY,EAAKJ,MAAMC,MAAMN,IAAM,EAAKyB,SAASzB,I,EAGpEyB,SAAW,SAAAzB,GAET,IAAMM,EAAQ,EAAKD,MAAMC,MAAMoB,QAG/B,GAFApB,EAAMN,GAAM,KAEP,EAAKS,SAASH,GAAQ,CACzB,IAAMqB,EAAY,GAClBrB,EAAMsB,QAAQ,SAACzB,EAAQH,GAAT,OAAiBG,GAAUwB,EAAUE,KAAK7B,KAExDM,EADeqB,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,UAC9C,IAElB,EAAKC,SAAS,CAAE5B,QAAOG,SAAU,EAAKA,SAASH,M,EAGjD6B,mBAAqB,WACnB,IAAMxB,EAAS,EAAKD,SAAS,EAAKL,MAAMC,OAClC8B,EAAO,EAAKlB,UAAU,EAAKb,MAAMC,OACnCK,EACF0B,WAAW,kBAAMC,MAAM,UAAD,OAAW3B,EAAX,UAA0B,GACvCyB,GACTC,WAAW,kBAAMC,MAAM,cAAc,I,EAIzCC,UAAY,WACV,EAAKL,SAAS,CACZ5B,MAAOC,MAAM,GAAGC,KAAK,MACrBC,UAAU,K,EAId+B,WAAa,SAAAxC,GAAE,OACb,kBAAC,EAAD,CACEyC,IAAKzC,EACLA,GAAIA,EACJE,MAAO,EAAKmB,YAAYqB,KAAjB,gBACPvC,OAAQ,EAAKE,MAAMC,MAAMN,M,EAI7B2C,YAAc,kBACZpC,MAAM,GACHC,OACAoC,IAAI,SAACC,EAAGC,GAAJ,OAAU,EAAKN,WAAWM,M,wEAGjC,OACE,yBAAKhD,UAAU,OACb,2CACA,yBAAKA,UAAU,SAASiD,KAAKJ,eAC7B,4BAAQ1C,QAAS8C,KAAKR,WAAtB,uB,GArFUS,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCZNoC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1c69d09e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cell = props => {\r\n  return (\r\n    <div className='cell' data-id={props.id} onClick={props.click}>\r\n      {props.player}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './components/Cell';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    moves: Array(9).fill(null),\r\n    gameOver: false\r\n  };\r\n\r\n  checkWin = moves => {\r\n    let winner;\r\n    const winningOptions = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    const win = winningOptions.some(option => {\r\n      const [a, b, c] = option;\r\n      const match = moves[a] && moves[a] === moves[b] && moves[a] === moves[c];\r\n      if (match) winner = moves[a];\r\n      return match;\r\n    });\r\n    return win && winner;\r\n  };\r\n\r\n  checkDraw = moves => moves.every(el => el !== null);\r\n  gameOver = moves => this.checkWin(moves) || this.checkDraw(moves);\r\n\r\n  handleClick = event => {\r\n    const { id } = event.target.dataset;\r\n    if (!(this.state.gameOver || this.state.moves[id])) this.makeMove(id);\r\n  };\r\n\r\n  makeMove = id => {\r\n    //Player's move:\r\n    const moves = this.state.moves.slice();\r\n    moves[id] = 'X';\r\n    // Machine's move\r\n    if (!this.gameOver(moves)) {\r\n      const vacantIDs = [];\r\n      moves.forEach((player, id) => !player && vacantIDs.push(id));\r\n      const random = vacantIDs[Math.floor(Math.random() * vacantIDs.length)];\r\n      moves[random] = '0';\r\n    }\r\n    this.setState({ moves, gameOver: this.gameOver(moves) });\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    const winner = this.checkWin(this.state.moves);\r\n    const draw = this.checkDraw(this.state.moves);\r\n    if (winner) {\r\n      setTimeout(() => alert(`Player ${winner} won`), 0);\r\n    } else if (draw) {\r\n      setTimeout(() => alert(`Game over`), 0);\r\n    }\r\n  };\r\n\r\n  resetGame = () => {\r\n    this.setState({\r\n      moves: Array(9).fill(null),\r\n      gameOver: false\r\n    });\r\n  };\r\n\r\n  renderCell = id => (\r\n    <Cell\r\n      key={id}\r\n      id={id}\r\n      click={this.handleClick.bind(this)}\r\n      player={this.state.moves[id]}\r\n    />\r\n  );\r\n\r\n  renderCells = () =>\r\n    Array(9)\r\n      .fill()\r\n      .map((_, i) => this.renderCell(i));\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <h1>Tic Tac Toe</h1>\r\n        <div className='table'>{this.renderCells()}</div>\r\n        <button onClick={this.resetGame}>Start new game</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}